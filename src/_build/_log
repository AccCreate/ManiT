### Starting build.
# Target: manit.ml.depends, tags: { package(llvm), package(llvm.analysis), extension:ml, file:manit.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package llvm.analysis -package llvm -modules manit.ml > manit.ml.depends
# Target: codegen.ml.depends, tags: { package(llvm), package(llvm.analysis), extension:ml, file:codegen.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package llvm.analysis -package llvm -modules codegen.ml > codegen.ml.depends
# Target: ast.ml.depends, tags: { package(llvm), package(llvm.analysis), extension:ml, file:ast.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package llvm.analysis -package llvm -modules ast.ml > ast.ml.depends
# Target: exceptions.ml.depends, tags: { package(llvm), package(llvm.analysis), extension:ml, file:exceptions.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package llvm.analysis -package llvm -modules exceptions.ml > exceptions.ml.depends
# Target: sast.ml.depends, tags: { package(llvm), package(llvm.analysis), extension:ml, file:sast.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package llvm.analysis -package llvm -modules sast.ml > sast.ml.depends
# Target: ast.cmo, tags: { package(llvm), package(llvm.analysis), byte, compile, extension:cmo, extension:ml, file:ast.cmo, file:ast.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -w +a-4 -package llvm.analysis -package llvm -o ast.cmo ast.ml
# Target: exceptions.cmo, tags: { package(llvm), package(llvm.analysis), byte, compile, extension:cmo, extension:ml, file:exceptions.cmo, file:exceptions.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -w +a-4 -package llvm.analysis -package llvm -o exceptions.cmo exceptions.ml
# Target: sast.cmo, tags: { package(llvm), package(llvm.analysis), byte, compile, extension:cmo, extension:ml, file:sast.cmo, file:sast.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -w +a-4 -package llvm.analysis -package llvm -o sast.cmo sast.ml
+ ocamlfind ocamlc -c -w +a-4 -package llvm.analysis -package llvm -o sast.cmo sast.ml
File "sast.ml", line 44, characters 4-19:
Warning 30: the label sname is defined in both types func_t and strc_t.
# Target: parser.mly, tags: { package(llvm), package(llvm.analysis), extension:mly, file:parser.mly, infer, ocaml, ocamlyacc, parser, quiet }
ocamlyacc parser.mly
# Target: parser.mli.depends, tags: { package(llvm), package(llvm.analysis), extension:mli, file:parser.mli, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package llvm.analysis -package llvm -modules parser.mli > parser.mli.depends
# Target: scanner.mll, tags: { package(llvm), package(llvm.analysis), extension:mll, file:scanner.mll, lexer, ocaml, ocamllex, quiet }
ocamllex.opt -q scanner.mll
# Target: scanner.ml.depends, tags: { package(llvm), package(llvm.analysis), extension:ml, file:scanner.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package llvm.analysis -package llvm -modules scanner.ml > scanner.ml.depends
# Target: parser.cmi, tags: { package(llvm), package(llvm.analysis), byte, compile, extension:mli, file:parser.mli, interf, ocaml, quiet }
ocamlfind ocamlc -c -w +a-4 -package llvm.analysis -package llvm -o parser.cmi parser.mli
# Target: semant.ml.depends, tags: { package(llvm), package(llvm.analysis), extension:ml, file:semant.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package llvm.analysis -package llvm -modules semant.ml > semant.ml.depends
# Target: codegen.cmo, tags: { package(llvm), package(llvm.analysis), byte, compile, extension:cmo, extension:ml, file:codegen.cmo, file:codegen.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -w +a-4 -package llvm.analysis -package llvm -o codegen.cmo codegen.ml
+ ocamlfind ocamlc -c -w +a-4 -package llvm.analysis -package llvm -o codegen.cmo codegen.ml
File "codegen.ml", line 43, characters 49-56:
Warning 41: sname belongs to several types: S.strc_t S.func_t
The first one was selected. Please disambiguate if this is wrong.
File "codegen.ml", line 56, characters 51-58:
Warning 41: sname belongs to several types: S.strc_t S.func_t
The first one was selected. Please disambiguate if this is wrong.
File "codegen.ml", line 56, characters 86-105:
Error: Unbound constructor Exceptions.BugCatch
Hint: Did you mean ErrCatch?
Command exited with code 2.
# Compilation unsuccessful.
