type token =
  | SEMI
  | LPAREN
  | RPAREN
  | LBRACE
  | RBRACE
  | COMMA
  | LBRACK
  | RBRACK
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | ASSIGN
  | NOT
  | EQ
  | NEQ
  | LT
  | LEQ
  | GT
  | GEQ
  | TRUE
  | FALSE
  | AND
  | OR
  | RETURN
  | IF
  | ELSE
  | FOR
  | WHILE
  | DEF
  | GLOBAL
  | STRUCT
  | DOT
  | INT
  | FLOAT
  | BOOL
  | STRING
  | VOID
  | INTLIT of (int)
  | FLOATLIT of (float)
  | STRINGLIT of (string)
  | ID of (string)
  | EOF

open Parsing;;
let _ = parse_error;;
# 4 "parser.mly"
    open Ast;;
    let unescape s = Scanf.sscanf ("\"" ^ s ^ "\"") "%S%!" (fun x -> x)
# 52 "parser.ml"
let yytransl_const = [|
  257 (* SEMI *);
  258 (* LPAREN *);
  259 (* RPAREN *);
  260 (* LBRACE *);
  261 (* RBRACE *);
  262 (* COMMA *);
  263 (* LBRACK *);
  264 (* RBRACK *);
  265 (* PLUS *);
  266 (* MINUS *);
  267 (* TIMES *);
  268 (* DIVIDE *);
  269 (* ASSIGN *);
  270 (* NOT *);
  271 (* EQ *);
  272 (* NEQ *);
  273 (* LT *);
  274 (* LEQ *);
  275 (* GT *);
  276 (* GEQ *);
  277 (* TRUE *);
  278 (* FALSE *);
  279 (* AND *);
  280 (* OR *);
  281 (* RETURN *);
  282 (* IF *);
  283 (* ELSE *);
  284 (* FOR *);
  285 (* WHILE *);
  286 (* DEF *);
  287 (* GLOBAL *);
  288 (* STRUCT *);
  289 (* DOT *);
  290 (* INT *);
  291 (* FLOAT *);
  292 (* BOOL *);
  293 (* STRING *);
  294 (* VOID *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  295 (* INTLIT *);
  296 (* FLOATLIT *);
  297 (* STRINGLIT *);
  298 (* ID *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\005\000\005\000\008\000\
\008\000\009\000\007\000\010\000\010\000\006\000\011\000\011\000\
\011\000\011\000\011\000\012\000\012\000\013\000\013\000\004\000\
\004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
\004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
\004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
\004\000\014\000\014\000\015\000\015\000\000\000"

let yylen = "\002\000\
\002\000\000\000\002\000\002\000\002\000\003\000\003\000\005\000\
\007\000\009\000\005\000\002\000\002\000\000\000\001\000\000\000\
\002\000\002\000\006\000\000\000\002\000\008\000\001\000\001\000\
\001\000\001\000\001\000\000\000\001\000\002\000\004\000\001\000\
\001\000\001\000\001\000\001\000\001\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\002\000\002\000\002\000\003\000\004\000\003\000\
\004\000\000\000\001\000\001\000\003\000\002\000"

let yydefred = "\000\000\
\002\000\000\000\062\000\000\000\000\000\002\000\000\000\000\000\
\035\000\036\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\032\000\033\000\034\000\000\000\001\000\003\000\000\000\
\000\000\000\000\000\000\000\000\000\000\005\000\000\000\000\000\
\000\000\000\000\023\000\025\000\024\000\026\000\027\000\012\000\
\000\000\000\000\000\000\013\000\000\000\000\000\004\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\051\000\056\000\007\000\006\000\
\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\055\000\000\000\
\000\000\000\000\011\000\000\000\000\000\000\000\000\000\017\000\
\000\000\000\000\000\000\000\000\030\000\000\000\000\000\018\000\
\000\000\021\000\009\000\000\000\002\000\000\000\019\000\000\000\
\000\000\031\000\010\000\022\000"

let yydgoto = "\002\000\
\003\000\004\000\023\000\024\000\067\000\040\000\044\000\094\000\
\104\000\105\000\041\000\101\000\102\000\073\000\074\000"

let yysindex = "\002\000\
\000\000\000\000\000\000\034\000\178\255\000\000\178\255\178\255\
\000\000\000\000\058\255\026\255\056\255\064\255\114\255\028\255\
\034\255\000\000\000\000\000\000\012\255\000\000\000\000\068\000\
\035\255\147\000\099\255\048\255\048\255\000\000\088\000\178\255\
\178\255\178\255\000\000\000\000\000\000\000\000\000\000\000\000\
\040\255\081\255\098\255\000\000\178\255\178\255\000\000\178\255\
\178\255\178\255\178\255\178\255\178\255\178\255\178\255\178\255\
\178\255\178\255\178\255\178\255\000\000\000\000\000\000\000\000\
\166\000\204\000\084\255\185\000\104\255\178\255\000\000\204\000\
\105\255\101\255\204\000\011\255\011\255\048\255\048\255\237\255\
\237\255\008\255\008\255\008\255\008\255\242\000\223\000\048\255\
\165\255\178\255\165\255\114\255\204\000\075\255\000\000\178\255\
\091\255\108\000\000\000\080\255\120\255\126\255\125\255\000\000\
\001\255\204\000\165\255\178\255\000\000\129\255\114\255\000\000\
\134\255\000\000\000\000\140\255\000\000\102\255\000\000\165\255\
\132\255\000\000\000\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\220\255\000\000\000\000\000\000\
\000\000\000\000\000\000\006\001\030\001\000\000\000\000\000\000\
\144\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\128\000\000\000\152\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\085\255\000\000\000\000\000\000\000\000\000\000\010\255\
\000\000\153\255\109\255\126\001\150\001\054\001\078\001\068\255\
\252\001\174\001\198\001\222\001\246\001\072\255\009\255\102\001\
\000\000\000\000\000\000\156\255\113\255\027\255\000\000\000\000\
\001\000\000\000\000\000\000\000\000\000\162\255\000\000\000\000\
\000\000\018\255\000\000\163\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\250\255\176\255\253\255\039\000\063\000\000\000\000\000\
\000\000\000\000\171\255\000\000\000\000\000\000\000\000"

let yytablesize = 788
let yytable = "\027\000\
\008\000\026\000\001\000\028\000\029\000\113\000\100\000\031\000\
\097\000\049\000\099\000\049\000\060\000\045\000\049\000\060\000\
\048\000\049\000\050\000\051\000\061\000\050\000\051\000\061\000\
\046\000\118\000\115\000\032\000\065\000\066\000\068\000\020\000\
\049\000\022\000\035\000\036\000\037\000\038\000\039\000\123\000\
\060\000\072\000\075\000\060\000\076\000\077\000\078\000\079\000\
\080\000\081\000\082\000\083\000\084\000\085\000\086\000\087\000\
\088\000\033\000\030\000\005\000\020\000\020\000\020\000\020\000\
\020\000\034\000\093\000\007\000\042\000\042\000\042\000\008\000\
\048\000\042\000\048\000\043\000\061\000\048\000\009\000\010\000\
\060\000\069\000\042\000\042\000\090\000\015\000\098\000\015\000\
\016\000\025\000\042\000\042\000\106\000\070\000\048\000\048\000\
\018\000\019\000\020\000\021\000\005\000\071\000\006\000\063\000\
\066\000\092\000\096\000\095\000\007\000\054\000\121\000\054\000\
\008\000\057\000\054\000\057\000\103\000\107\000\057\000\009\000\
\010\000\109\000\110\000\011\000\012\000\112\000\013\000\014\000\
\015\000\016\000\017\000\111\000\117\000\005\000\119\000\006\000\
\124\000\018\000\019\000\020\000\021\000\007\000\120\000\122\000\
\014\000\008\000\116\000\035\000\036\000\037\000\038\000\039\000\
\009\000\010\000\058\000\059\000\011\000\012\000\028\000\013\000\
\014\000\015\000\016\000\017\000\029\000\014\000\005\000\114\000\
\006\000\000\000\018\000\019\000\020\000\021\000\007\000\000\000\
\000\000\000\000\008\000\005\000\000\000\000\000\000\000\000\000\
\000\000\009\000\010\000\007\000\000\000\011\000\012\000\008\000\
\013\000\014\000\015\000\016\000\017\000\000\000\009\000\010\000\
\000\000\000\000\000\000\018\000\019\000\020\000\021\000\000\000\
\016\000\025\000\000\000\000\000\000\000\000\000\000\000\000\000\
\018\000\019\000\020\000\021\000\037\000\000\000\037\000\000\000\
\000\000\037\000\000\000\000\000\037\000\037\000\037\000\037\000\
\000\000\000\000\037\000\037\000\037\000\037\000\037\000\037\000\
\000\000\000\000\037\000\037\000\000\000\048\000\049\000\050\000\
\051\000\000\000\000\000\000\000\037\000\054\000\055\000\056\000\
\057\000\000\000\008\000\000\000\008\000\008\000\000\000\000\000\
\000\000\000\000\008\000\000\000\000\000\060\000\008\000\000\000\
\000\000\000\000\000\000\000\000\000\000\008\000\008\000\000\000\
\000\000\008\000\008\000\000\000\008\000\008\000\008\000\008\000\
\008\000\000\000\000\000\005\000\000\000\006\000\000\000\008\000\
\008\000\008\000\008\000\007\000\000\000\000\000\000\000\008\000\
\000\000\000\000\000\000\000\000\000\000\000\000\009\000\010\000\
\000\000\000\000\011\000\012\000\000\000\013\000\014\000\015\000\
\016\000\017\000\000\000\000\000\047\000\000\000\000\000\000\000\
\018\000\019\000\020\000\021\000\048\000\049\000\050\000\051\000\
\000\000\000\000\052\000\053\000\054\000\055\000\056\000\057\000\
\064\000\000\000\058\000\059\000\000\000\000\000\000\000\000\000\
\048\000\049\000\050\000\051\000\060\000\000\000\052\000\053\000\
\054\000\055\000\056\000\057\000\108\000\000\000\058\000\059\000\
\000\000\000\000\000\000\000\000\048\000\049\000\050\000\051\000\
\060\000\000\000\052\000\053\000\054\000\055\000\056\000\057\000\
\051\000\000\000\058\000\059\000\000\000\000\000\000\000\000\000\
\051\000\051\000\051\000\051\000\060\000\000\000\051\000\051\000\
\051\000\051\000\051\000\051\000\000\000\062\000\051\000\051\000\
\000\000\000\000\000\000\048\000\049\000\050\000\051\000\000\000\
\051\000\052\000\053\000\054\000\055\000\056\000\057\000\000\000\
\089\000\058\000\059\000\000\000\000\000\000\000\048\000\049\000\
\050\000\051\000\000\000\060\000\052\000\053\000\054\000\055\000\
\056\000\057\000\000\000\091\000\058\000\059\000\000\000\000\000\
\000\000\048\000\049\000\050\000\051\000\000\000\060\000\052\000\
\053\000\054\000\055\000\056\000\057\000\000\000\000\000\058\000\
\059\000\000\000\000\000\000\000\048\000\049\000\050\000\051\000\
\000\000\060\000\052\000\053\000\054\000\055\000\056\000\057\000\
\000\000\000\000\058\000\059\000\000\000\000\000\000\000\048\000\
\049\000\050\000\051\000\000\000\060\000\052\000\053\000\054\000\
\055\000\056\000\057\000\000\000\000\000\058\000\000\000\000\000\
\000\000\000\000\048\000\049\000\050\000\051\000\000\000\060\000\
\052\000\053\000\054\000\055\000\056\000\057\000\052\000\000\000\
\052\000\000\000\000\000\052\000\000\000\000\000\052\000\052\000\
\052\000\052\000\060\000\000\000\052\000\052\000\052\000\052\000\
\052\000\052\000\000\000\000\000\052\000\052\000\053\000\000\000\
\053\000\000\000\000\000\053\000\000\000\000\000\053\000\053\000\
\053\000\053\000\000\000\000\000\053\000\053\000\053\000\053\000\
\053\000\053\000\000\000\000\000\053\000\053\000\040\000\000\000\
\040\000\000\000\000\000\040\000\000\000\000\000\040\000\040\000\
\040\000\040\000\000\000\000\000\040\000\040\000\040\000\040\000\
\040\000\040\000\000\000\000\000\040\000\040\000\041\000\000\000\
\041\000\000\000\000\000\041\000\000\000\000\000\041\000\041\000\
\041\000\041\000\000\000\000\000\041\000\041\000\041\000\041\000\
\041\000\041\000\000\000\000\000\041\000\041\000\050\000\000\000\
\050\000\000\000\000\000\050\000\000\000\000\000\050\000\050\000\
\050\000\050\000\000\000\000\000\050\000\050\000\050\000\050\000\
\050\000\050\000\000\000\000\000\050\000\050\000\038\000\000\000\
\038\000\000\000\000\000\038\000\000\000\000\000\038\000\038\000\
\000\000\000\000\000\000\000\000\038\000\038\000\038\000\038\000\
\038\000\038\000\000\000\000\000\038\000\038\000\039\000\000\000\
\039\000\000\000\000\000\039\000\000\000\000\000\039\000\039\000\
\000\000\000\000\000\000\000\000\039\000\039\000\039\000\039\000\
\039\000\039\000\000\000\000\000\039\000\039\000\044\000\000\000\
\044\000\000\000\000\000\044\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\044\000\044\000\044\000\044\000\
\044\000\044\000\000\000\000\000\044\000\044\000\045\000\000\000\
\045\000\000\000\000\000\045\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\045\000\045\000\045\000\045\000\
\045\000\045\000\000\000\000\000\045\000\045\000\046\000\000\000\
\046\000\000\000\000\000\046\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\046\000\046\000\046\000\046\000\
\046\000\046\000\000\000\000\000\046\000\046\000\047\000\000\000\
\047\000\000\000\000\000\047\000\043\000\000\000\043\000\000\000\
\000\000\043\000\000\000\000\000\047\000\047\000\047\000\047\000\
\047\000\047\000\043\000\043\000\047\000\047\000\000\000\000\000\
\000\000\000\000\043\000\043\000"

let yycheck = "\006\000\
\000\000\005\000\001\000\007\000\008\000\005\001\092\000\011\000\
\089\000\001\001\091\000\003\001\003\001\002\001\006\001\006\001\
\009\001\010\001\011\001\012\001\003\001\011\001\012\001\006\001\
\013\001\111\000\107\000\002\001\032\000\033\000\034\000\005\001\
\024\001\000\000\034\001\035\001\036\001\037\001\038\001\120\000\
\033\001\045\000\046\000\033\001\048\000\049\000\050\000\051\000\
\052\000\053\000\054\000\055\000\056\000\057\000\058\000\059\000\
\060\000\002\001\001\001\002\001\034\001\035\001\036\001\037\001\
\038\001\002\001\070\000\010\001\001\001\042\001\003\001\014\001\
\001\001\006\001\003\001\042\001\042\001\006\001\021\001\022\001\
\033\001\042\001\015\001\016\001\001\001\001\001\090\000\003\001\
\031\001\032\001\023\001\024\001\096\000\013\001\023\001\024\001\
\039\001\040\001\041\001\042\001\002\001\004\001\004\001\005\001\
\108\000\002\001\006\001\003\001\010\001\001\001\117\000\003\001\
\014\001\001\001\006\001\003\001\042\001\027\001\006\001\021\001\
\022\001\042\001\003\001\025\001\026\001\001\001\028\001\029\001\
\030\001\031\001\032\001\006\001\004\001\002\001\001\001\004\001\
\005\001\039\001\040\001\041\001\042\001\010\001\003\001\042\001\
\001\001\014\001\108\000\034\001\035\001\036\001\037\001\038\001\
\021\001\022\001\003\001\003\001\025\001\026\001\003\001\028\001\
\029\001\030\001\031\001\032\001\003\001\003\001\002\001\105\000\
\004\001\255\255\039\001\040\001\041\001\042\001\010\001\255\255\
\255\255\255\255\014\001\002\001\255\255\255\255\255\255\255\255\
\255\255\021\001\022\001\010\001\255\255\025\001\026\001\014\001\
\028\001\029\001\030\001\031\001\032\001\255\255\021\001\022\001\
\255\255\255\255\255\255\039\001\040\001\041\001\042\001\255\255\
\031\001\032\001\255\255\255\255\255\255\255\255\255\255\255\255\
\039\001\040\001\041\001\042\001\001\001\255\255\003\001\255\255\
\255\255\006\001\255\255\255\255\009\001\010\001\011\001\012\001\
\255\255\255\255\015\001\016\001\017\001\018\001\019\001\020\001\
\255\255\255\255\023\001\024\001\255\255\009\001\010\001\011\001\
\012\001\255\255\255\255\255\255\033\001\017\001\018\001\019\001\
\020\001\255\255\002\001\255\255\004\001\005\001\255\255\255\255\
\255\255\255\255\010\001\255\255\255\255\033\001\014\001\255\255\
\255\255\255\255\255\255\255\255\255\255\021\001\022\001\255\255\
\255\255\025\001\026\001\255\255\028\001\029\001\030\001\031\001\
\032\001\255\255\255\255\002\001\255\255\004\001\255\255\039\001\
\040\001\041\001\042\001\010\001\255\255\255\255\255\255\014\001\
\255\255\255\255\255\255\255\255\255\255\255\255\021\001\022\001\
\255\255\255\255\025\001\026\001\255\255\028\001\029\001\030\001\
\031\001\032\001\255\255\255\255\001\001\255\255\255\255\255\255\
\039\001\040\001\041\001\042\001\009\001\010\001\011\001\012\001\
\255\255\255\255\015\001\016\001\017\001\018\001\019\001\020\001\
\001\001\255\255\023\001\024\001\255\255\255\255\255\255\255\255\
\009\001\010\001\011\001\012\001\033\001\255\255\015\001\016\001\
\017\001\018\001\019\001\020\001\001\001\255\255\023\001\024\001\
\255\255\255\255\255\255\255\255\009\001\010\001\011\001\012\001\
\033\001\255\255\015\001\016\001\017\001\018\001\019\001\020\001\
\001\001\255\255\023\001\024\001\255\255\255\255\255\255\255\255\
\009\001\010\001\011\001\012\001\033\001\255\255\015\001\016\001\
\017\001\018\001\019\001\020\001\255\255\003\001\023\001\024\001\
\255\255\255\255\255\255\009\001\010\001\011\001\012\001\255\255\
\033\001\015\001\016\001\017\001\018\001\019\001\020\001\255\255\
\003\001\023\001\024\001\255\255\255\255\255\255\009\001\010\001\
\011\001\012\001\255\255\033\001\015\001\016\001\017\001\018\001\
\019\001\020\001\255\255\003\001\023\001\024\001\255\255\255\255\
\255\255\009\001\010\001\011\001\012\001\255\255\033\001\015\001\
\016\001\017\001\018\001\019\001\020\001\255\255\255\255\023\001\
\024\001\255\255\255\255\255\255\009\001\010\001\011\001\012\001\
\255\255\033\001\015\001\016\001\017\001\018\001\019\001\020\001\
\255\255\255\255\023\001\024\001\255\255\255\255\255\255\009\001\
\010\001\011\001\012\001\255\255\033\001\015\001\016\001\017\001\
\018\001\019\001\020\001\255\255\255\255\023\001\255\255\255\255\
\255\255\255\255\009\001\010\001\011\001\012\001\255\255\033\001\
\015\001\016\001\017\001\018\001\019\001\020\001\001\001\255\255\
\003\001\255\255\255\255\006\001\255\255\255\255\009\001\010\001\
\011\001\012\001\033\001\255\255\015\001\016\001\017\001\018\001\
\019\001\020\001\255\255\255\255\023\001\024\001\001\001\255\255\
\003\001\255\255\255\255\006\001\255\255\255\255\009\001\010\001\
\011\001\012\001\255\255\255\255\015\001\016\001\017\001\018\001\
\019\001\020\001\255\255\255\255\023\001\024\001\001\001\255\255\
\003\001\255\255\255\255\006\001\255\255\255\255\009\001\010\001\
\011\001\012\001\255\255\255\255\015\001\016\001\017\001\018\001\
\019\001\020\001\255\255\255\255\023\001\024\001\001\001\255\255\
\003\001\255\255\255\255\006\001\255\255\255\255\009\001\010\001\
\011\001\012\001\255\255\255\255\015\001\016\001\017\001\018\001\
\019\001\020\001\255\255\255\255\023\001\024\001\001\001\255\255\
\003\001\255\255\255\255\006\001\255\255\255\255\009\001\010\001\
\011\001\012\001\255\255\255\255\015\001\016\001\017\001\018\001\
\019\001\020\001\255\255\255\255\023\001\024\001\001\001\255\255\
\003\001\255\255\255\255\006\001\255\255\255\255\009\001\010\001\
\255\255\255\255\255\255\255\255\015\001\016\001\017\001\018\001\
\019\001\020\001\255\255\255\255\023\001\024\001\001\001\255\255\
\003\001\255\255\255\255\006\001\255\255\255\255\009\001\010\001\
\255\255\255\255\255\255\255\255\015\001\016\001\017\001\018\001\
\019\001\020\001\255\255\255\255\023\001\024\001\001\001\255\255\
\003\001\255\255\255\255\006\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\015\001\016\001\017\001\018\001\
\019\001\020\001\255\255\255\255\023\001\024\001\001\001\255\255\
\003\001\255\255\255\255\006\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\015\001\016\001\017\001\018\001\
\019\001\020\001\255\255\255\255\023\001\024\001\001\001\255\255\
\003\001\255\255\255\255\006\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\015\001\016\001\017\001\018\001\
\019\001\020\001\255\255\255\255\023\001\024\001\001\001\255\255\
\003\001\255\255\255\255\006\001\001\001\255\255\003\001\255\255\
\255\255\006\001\255\255\255\255\015\001\016\001\017\001\018\001\
\019\001\020\001\015\001\016\001\023\001\024\001\255\255\255\255\
\255\255\255\255\023\001\024\001"

let yynames_const = "\
  SEMI\000\
  LPAREN\000\
  RPAREN\000\
  LBRACE\000\
  RBRACE\000\
  COMMA\000\
  LBRACK\000\
  RBRACK\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  ASSIGN\000\
  NOT\000\
  EQ\000\
  NEQ\000\
  LT\000\
  LEQ\000\
  GT\000\
  GEQ\000\
  TRUE\000\
  FALSE\000\
  AND\000\
  OR\000\
  RETURN\000\
  IF\000\
  ELSE\000\
  FOR\000\
  WHILE\000\
  DEF\000\
  GLOBAL\000\
  STRUCT\000\
  DOT\000\
  INT\000\
  FLOAT\000\
  BOOL\000\
  STRING\000\
  VOID\000\
  EOF\000\
  "

let yynames_block = "\
  INTLIT\000\
  FLOATLIT\000\
  STRINGLIT\000\
  ID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmts) in
    Obj.repr(
# 43 "parser.mly"
            ( List.rev _1 )
# 443 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    Obj.repr(
# 46 "parser.mly"
                   ( [] )
# 449 "parser.ml"
               : 'stmts))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmts) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 47 "parser.mly"
               ( _2 :: _1 )
# 457 "parser.ml"
               : 'stmts))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 50 "parser.mly"
              ( Expr _1 )
# 464 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 51 "parser.mly"
                ( Return Noexpr )
# 470 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 52 "parser.mly"
                     ( Return _2 )
# 477 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'stmts) in
    Obj.repr(
# 53 "parser.mly"
                        ( Block(List.rev _2) )
# 484 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 54 "parser.mly"
                                            ( If(_3, _5, Block([])) )
# 492 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'stmt) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 55 "parser.mly"
                                            ( If(_3, _5, _7) )
# 501 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'expr_opt) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'expr_opt) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 57 "parser.mly"
     ( For(_3, _5, _7, _9) )
# 511 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 58 "parser.mly"
                                  ( While(_3, _5) )
# 519 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'func) in
    Obj.repr(
# 59 "parser.mly"
             ( Func(_2) )
# 526 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'struct_dec) in
    Obj.repr(
# 60 "parser.mly"
                      ( Struc(_2) )
# 533 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 64 "parser.mly"
                  ( Noexpr )
# 539 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 65 "parser.mly"
                  ( _1 )
# 546 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    Obj.repr(
# 68 "parser.mly"
  ( [] )
# 552 "parser.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'vdecl_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 69 "parser.mly"
                     ( _2::_1 )
# 560 "parser.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 72 "parser.mly"
          ( Id(_1) )
# 567 "parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'vdecl_list) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'func_list) in
    Obj.repr(
# 75 "parser.mly"
                                             ({
    sname = _1; attributes = List.rev _3; funcs = List.rev _4 })
# 577 "parser.ml"
               : 'struct_dec))
; (fun __caml_parser_env ->
    Obj.repr(
# 79 "parser.mly"
  ( [] )
# 583 "parser.ml"
               : 'func_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'func_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'func) in
    Obj.repr(
# 80 "parser.mly"
                   ( _2::_1 )
# 591 "parser.ml"
               : 'func_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'formals_opt) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'stmts) in
    Obj.repr(
# 84 "parser.mly"
   ( { typ = _1;
       fname = _2;
       formals = _4;
       body = List.rev _7 } )
# 604 "parser.ml"
               : 'func))
; (fun __caml_parser_env ->
    Obj.repr(
# 90 "parser.mly"
        ( Int )
# 610 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 91 "parser.mly"
         ( Bool )
# 616 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 92 "parser.mly"
          ( Float )
# 622 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 93 "parser.mly"
           ( String )
# 628 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 94 "parser.mly"
           ( Void )
# 634 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 97 "parser.mly"
                  ( [] )
# 640 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'formal_list) in
    Obj.repr(
# 98 "parser.mly"
                  ( List.rev _1 )
# 647 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 101 "parser.mly"
           ( [(_1, _2)] )
# 655 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'formal_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 102 "parser.mly"
                             ( (_3, _4)  :: _1 )
# 664 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 105 "parser.mly"
                    ( IntLit(_1) )
# 671 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 106 "parser.mly"
                    ( FloatLit(_1) )
# 678 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 107 "parser.mly"
                ( StringLit(unescape _1) )
# 685 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 108 "parser.mly"
                     ( BoolLit(true) )
# 691 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 109 "parser.mly"
                     ( BoolLit(false) )
# 697 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 110 "parser.mly"
                     ( Id(_1) )
# 704 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 111 "parser.mly"
                     ( Binop(_1, Add,   _3) )
# 712 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 112 "parser.mly"
                     ( Binop(_1, Sub,   _3) )
# 720 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 113 "parser.mly"
                     ( Binop(_1, Mult,  _3) )
# 728 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 114 "parser.mly"
                     ( Binop(_1, Div,   _3) )
# 736 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 115 "parser.mly"
                     ( Binop(_1, Equal, _3) )
# 744 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 116 "parser.mly"
                     ( Binop(_1, Neq,   _3) )
# 752 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 117 "parser.mly"
                     ( Binop(_1, Less,  _3) )
# 760 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 118 "parser.mly"
                     ( Binop(_1, Leq,   _3) )
# 768 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 119 "parser.mly"
                     ( Binop(_1, Greater, _3) )
# 776 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 120 "parser.mly"
                     ( Binop(_1, Geq,   _3) )
# 784 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 121 "parser.mly"
                     ( Binop(_1, And,   _3) )
# 792 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 122 "parser.mly"
                     ( Binop(_1, Or,    _3) )
# 800 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 123 "parser.mly"
                     ( Struct_access(_1, _3))
# 808 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 124 "parser.mly"
                     ( Struct_make(_2))
# 815 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 125 "parser.mly"
                         ( Unop(Neg, _2) )
# 822 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 126 "parser.mly"
                     ( Unop(Not, _2) )
# 829 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 127 "parser.mly"
                     ( Assign(_1, _3) )
# 837 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'actuals_opt) in
    Obj.repr(
# 128 "parser.mly"
                                 ( Call(_1, _3) )
# 845 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 129 "parser.mly"
                       ( _2 )
# 852 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 130 "parser.mly"
                          ( GlobalAsn(_2, _4) )
# 860 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 133 "parser.mly"
                  ( [] )
# 866 "parser.ml"
               : 'actuals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'actuals_list) in
    Obj.repr(
# 134 "parser.mly"
                  ( List.rev _1 )
# 873 "parser.ml"
               : 'actuals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 137 "parser.mly"
                            ( [_1] )
# 880 "parser.ml"
               : 'actuals_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'actuals_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 138 "parser.mly"
                            ( _3 :: _1 )
# 888 "parser.ml"
               : 'actuals_list))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
