type token =
  | SEMI
  | LPAREN
  | RPAREN
  | LBRACE
  | RBRACE
  | COMMA
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | ASSIGN
  | NOT
  | EQ
  | NEQ
  | LT
  | LEQ
  | GT
  | GEQ
  | TRUE
  | FALSE
  | AND
  | OR
  | RETURN
  | IF
  | ELSE
  | FOR
  | WHILE
  | DEF
  | INTLIT of (int)
  | STRINGLIT of (string)
  | ID of (string)
  | EOF

open Parsing;;
let _ = parse_error;;
# 4 "parser.mly"
    open Ast;;
    let unescape s = Scanf.sscanf ("\"" ^ s ^ "\"") "%S%!" (fun x -> x)
# 41 "parser.ml"
let yytransl_const = [|
  257 (* SEMI *);
  258 (* LPAREN *);
  259 (* RPAREN *);
  260 (* LBRACE *);
  261 (* RBRACE *);
  262 (* COMMA *);
  263 (* PLUS *);
  264 (* MINUS *);
  265 (* TIMES *);
  266 (* DIVIDE *);
  267 (* ASSIGN *);
  268 (* NOT *);
  269 (* EQ *);
  270 (* NEQ *);
  271 (* LT *);
  272 (* LEQ *);
  273 (* GT *);
  274 (* GEQ *);
  275 (* TRUE *);
  276 (* FALSE *);
  277 (* AND *);
  278 (* OR *);
  279 (* RETURN *);
  280 (* IF *);
  281 (* ELSE *);
  282 (* FOR *);
  283 (* WHILE *);
  284 (* DEF *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  285 (* INTLIT *);
  286 (* STRINGLIT *);
  287 (* ID *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\005\000\005\000\006\000\007\000\
\007\000\008\000\008\000\004\000\004\000\004\000\004\000\004\000\
\004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
\004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
\004\000\009\000\009\000\010\000\010\000\000\000"

let yylen = "\002\000\
\002\000\000\000\002\000\002\000\002\000\003\000\003\000\005\000\
\007\000\009\000\005\000\002\000\000\000\001\000\007\000\000\000\
\001\000\001\000\003\000\001\000\001\000\001\000\001\000\001\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\002\000\002\000\003\000\004\000\
\003\000\000\000\001\000\001\000\003\000\002\000"

let yydefred = "\000\000\
\002\000\000\000\046\000\000\000\000\000\002\000\000\000\000\000\
\022\000\023\000\000\000\000\000\000\000\000\000\000\000\020\000\
\021\000\000\000\001\000\003\000\000\000\000\000\000\000\037\000\
\038\000\005\000\000\000\000\000\000\000\000\000\000\000\012\000\
\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\041\000\
\007\000\006\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\027\000\028\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\018\000\000\000\000\000\040\000\000\000\000\000\
\000\000\011\000\000\000\000\000\000\000\000\000\000\000\002\000\
\019\000\009\000\000\000\000\000\000\000\015\000\010\000"

let yydgoto = "\002\000\
\003\000\004\000\020\000\021\000\053\000\032\000\076\000\077\000\
\057\000\058\000"

let yysindex = "\008\000\
\000\000\000\000\000\000\014\000\129\255\000\000\129\255\129\255\
\000\000\000\000\042\255\020\255\047\255\054\255\029\255\000\000\
\000\000\006\255\000\000\000\000\178\255\155\000\073\255\000\000\
\000\000\000\000\196\255\129\255\129\255\129\255\061\255\000\000\
\129\255\129\255\000\000\129\255\129\255\129\255\129\255\129\255\
\129\255\129\255\129\255\129\255\129\255\129\255\129\255\000\000\
\000\000\000\000\171\000\203\000\063\255\187\000\034\255\203\000\
\067\255\074\255\203\000\043\255\043\255\000\000\000\000\246\000\
\246\000\011\255\011\255\011\255\011\255\234\000\219\000\116\255\
\129\255\116\255\000\000\076\255\077\255\000\000\129\255\059\255\
\214\255\000\000\083\255\058\255\203\000\116\255\129\255\000\000\
\000\000\000\000\092\255\086\255\116\255\000\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\160\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\106\255\000\000\000\000\000\000\
\105\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\044\255\000\000\000\000\108\255\009\255\
\000\000\118\255\010\255\236\255\045\000\000\000\000\000\045\255\
\139\000\067\000\089\000\111\000\133\000\150\255\004\255\000\000\
\000\000\000\000\000\000\000\000\119\255\000\000\000\000\001\000\
\000\000\000\000\000\000\000\000\024\255\000\000\120\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\254\255\239\255\251\255\032\000\000\000\000\000\000\000\
\000\000\000\000"

let yytablesize = 520
let yytable = "\022\000\
\008\000\024\000\025\000\023\000\036\000\027\000\036\000\033\000\
\001\000\036\000\039\000\044\000\039\000\019\000\044\000\039\000\
\034\000\036\000\037\000\038\000\039\000\028\000\051\000\052\000\
\054\000\036\000\045\000\056\000\059\000\045\000\060\000\061\000\
\062\000\063\000\064\000\065\000\066\000\067\000\068\000\069\000\
\070\000\071\000\026\000\005\000\014\000\029\000\014\000\029\000\
\029\000\007\000\029\000\038\000\039\000\008\000\080\000\030\000\
\082\000\029\000\029\000\031\000\009\000\010\000\055\000\073\000\
\075\000\029\000\029\000\081\000\090\000\078\000\016\000\017\000\
\018\000\085\000\005\000\095\000\006\000\049\000\083\000\079\000\
\007\000\052\000\084\000\086\000\008\000\092\000\088\000\005\000\
\089\000\006\000\094\000\009\000\010\000\007\000\093\000\011\000\
\012\000\008\000\013\000\014\000\015\000\016\000\017\000\018\000\
\009\000\010\000\013\000\042\000\011\000\012\000\016\000\013\000\
\014\000\015\000\016\000\017\000\018\000\005\000\091\000\006\000\
\043\000\017\000\013\000\007\000\000\000\000\000\000\000\008\000\
\000\000\000\000\005\000\000\000\000\000\000\000\009\000\010\000\
\007\000\000\000\011\000\012\000\008\000\013\000\014\000\015\000\
\016\000\017\000\018\000\009\000\010\000\000\000\035\000\000\000\
\035\000\000\000\000\000\035\000\000\000\016\000\017\000\018\000\
\024\000\000\000\024\000\000\000\000\000\024\000\024\000\024\000\
\024\000\024\000\035\000\035\000\024\000\024\000\024\000\024\000\
\024\000\024\000\035\000\000\000\024\000\024\000\000\000\000\000\
\036\000\037\000\038\000\039\000\000\000\000\000\040\000\041\000\
\042\000\043\000\044\000\045\000\050\000\000\000\046\000\047\000\
\000\000\000\000\036\000\037\000\038\000\039\000\000\000\000\000\
\040\000\041\000\042\000\043\000\044\000\045\000\087\000\000\000\
\046\000\047\000\000\000\000\000\036\000\037\000\038\000\039\000\
\000\000\000\000\040\000\041\000\042\000\043\000\044\000\045\000\
\000\000\000\000\046\000\047\000\025\000\000\000\025\000\000\000\
\000\000\025\000\025\000\025\000\000\000\000\000\000\000\000\000\
\025\000\025\000\025\000\025\000\025\000\025\000\000\000\000\000\
\025\000\025\000\008\000\000\000\008\000\008\000\000\000\000\000\
\008\000\000\000\000\000\000\000\008\000\000\000\000\000\005\000\
\000\000\006\000\000\000\008\000\008\000\007\000\000\000\008\000\
\008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
\009\000\010\000\000\000\000\000\011\000\012\000\000\000\013\000\
\014\000\015\000\016\000\017\000\018\000\026\000\000\000\026\000\
\000\000\000\000\026\000\026\000\026\000\000\000\000\000\000\000\
\000\000\026\000\026\000\026\000\026\000\026\000\026\000\000\000\
\000\000\026\000\026\000\031\000\000\000\031\000\000\000\000\000\
\031\000\000\000\000\000\000\000\000\000\000\000\000\000\031\000\
\031\000\031\000\031\000\031\000\031\000\000\000\000\000\031\000\
\031\000\032\000\000\000\032\000\000\000\000\000\032\000\000\000\
\000\000\000\000\000\000\000\000\000\000\032\000\032\000\032\000\
\032\000\032\000\032\000\000\000\000\000\032\000\032\000\033\000\
\000\000\033\000\000\000\000\000\033\000\000\000\000\000\000\000\
\000\000\000\000\000\000\033\000\033\000\033\000\033\000\033\000\
\033\000\000\000\000\000\033\000\033\000\034\000\000\000\034\000\
\000\000\000\000\034\000\030\000\000\000\030\000\000\000\000\000\
\030\000\034\000\034\000\034\000\034\000\034\000\034\000\030\000\
\030\000\034\000\034\000\000\000\000\000\048\000\000\000\030\000\
\030\000\036\000\037\000\038\000\039\000\000\000\000\000\040\000\
\041\000\042\000\043\000\044\000\045\000\072\000\000\000\046\000\
\047\000\036\000\037\000\038\000\039\000\000\000\000\000\040\000\
\041\000\042\000\043\000\044\000\045\000\074\000\000\000\046\000\
\047\000\036\000\037\000\038\000\039\000\000\000\000\000\040\000\
\041\000\042\000\043\000\044\000\045\000\000\000\000\000\046\000\
\047\000\036\000\037\000\038\000\039\000\000\000\000\000\040\000\
\041\000\042\000\043\000\044\000\045\000\000\000\000\000\046\000\
\047\000\036\000\037\000\038\000\039\000\000\000\000\000\040\000\
\041\000\042\000\043\000\044\000\045\000\000\000\000\000\046\000\
\036\000\037\000\038\000\039\000\000\000\000\000\040\000\041\000\
\042\000\043\000\044\000\045\000\036\000\037\000\038\000\039\000\
\000\000\000\000\000\000\000\000\042\000\043\000\044\000\045\000"

let yycheck = "\005\000\
\000\000\007\000\008\000\006\000\001\001\011\000\003\001\002\001\
\001\000\006\001\001\001\003\001\003\001\000\000\006\001\006\001\
\011\001\007\001\008\001\009\001\010\001\002\001\028\000\029\000\
\030\000\022\001\003\001\033\000\034\000\006\001\036\000\037\000\
\038\000\039\000\040\000\041\000\042\000\043\000\044\000\045\000\
\046\000\047\000\001\001\002\001\001\001\001\001\003\001\003\001\
\002\001\008\001\006\001\009\001\010\001\012\001\072\000\002\001\
\074\000\013\001\014\001\031\001\019\001\020\001\002\001\001\001\
\031\001\021\001\022\001\073\000\086\000\003\001\029\001\030\001\
\031\001\079\000\002\001\093\000\004\001\005\001\003\001\006\001\
\008\001\087\000\006\001\025\001\012\001\088\000\004\001\002\001\
\031\001\004\001\005\001\019\001\020\001\008\001\003\001\023\001\
\024\001\012\001\026\001\027\001\028\001\029\001\030\001\031\001\
\019\001\020\001\001\001\003\001\023\001\024\001\003\001\026\001\
\027\001\028\001\029\001\030\001\031\001\002\001\087\000\004\001\
\003\001\003\001\003\001\008\001\255\255\255\255\255\255\012\001\
\255\255\255\255\002\001\255\255\255\255\255\255\019\001\020\001\
\008\001\255\255\023\001\024\001\012\001\026\001\027\001\028\001\
\029\001\030\001\031\001\019\001\020\001\255\255\001\001\255\255\
\003\001\255\255\255\255\006\001\255\255\029\001\030\001\031\001\
\001\001\255\255\003\001\255\255\255\255\006\001\007\001\008\001\
\009\001\010\001\021\001\022\001\013\001\014\001\015\001\016\001\
\017\001\018\001\001\001\255\255\021\001\022\001\255\255\255\255\
\007\001\008\001\009\001\010\001\255\255\255\255\013\001\014\001\
\015\001\016\001\017\001\018\001\001\001\255\255\021\001\022\001\
\255\255\255\255\007\001\008\001\009\001\010\001\255\255\255\255\
\013\001\014\001\015\001\016\001\017\001\018\001\001\001\255\255\
\021\001\022\001\255\255\255\255\007\001\008\001\009\001\010\001\
\255\255\255\255\013\001\014\001\015\001\016\001\017\001\018\001\
\255\255\255\255\021\001\022\001\001\001\255\255\003\001\255\255\
\255\255\006\001\007\001\008\001\255\255\255\255\255\255\255\255\
\013\001\014\001\015\001\016\001\017\001\018\001\255\255\255\255\
\021\001\022\001\002\001\255\255\004\001\005\001\255\255\255\255\
\008\001\255\255\255\255\255\255\012\001\255\255\255\255\002\001\
\255\255\004\001\255\255\019\001\020\001\008\001\255\255\023\001\
\024\001\012\001\026\001\027\001\028\001\029\001\030\001\031\001\
\019\001\020\001\255\255\255\255\023\001\024\001\255\255\026\001\
\027\001\028\001\029\001\030\001\031\001\001\001\255\255\003\001\
\255\255\255\255\006\001\007\001\008\001\255\255\255\255\255\255\
\255\255\013\001\014\001\015\001\016\001\017\001\018\001\255\255\
\255\255\021\001\022\001\001\001\255\255\003\001\255\255\255\255\
\006\001\255\255\255\255\255\255\255\255\255\255\255\255\013\001\
\014\001\015\001\016\001\017\001\018\001\255\255\255\255\021\001\
\022\001\001\001\255\255\003\001\255\255\255\255\006\001\255\255\
\255\255\255\255\255\255\255\255\255\255\013\001\014\001\015\001\
\016\001\017\001\018\001\255\255\255\255\021\001\022\001\001\001\
\255\255\003\001\255\255\255\255\006\001\255\255\255\255\255\255\
\255\255\255\255\255\255\013\001\014\001\015\001\016\001\017\001\
\018\001\255\255\255\255\021\001\022\001\001\001\255\255\003\001\
\255\255\255\255\006\001\001\001\255\255\003\001\255\255\255\255\
\006\001\013\001\014\001\015\001\016\001\017\001\018\001\013\001\
\014\001\021\001\022\001\255\255\255\255\003\001\255\255\021\001\
\022\001\007\001\008\001\009\001\010\001\255\255\255\255\013\001\
\014\001\015\001\016\001\017\001\018\001\003\001\255\255\021\001\
\022\001\007\001\008\001\009\001\010\001\255\255\255\255\013\001\
\014\001\015\001\016\001\017\001\018\001\003\001\255\255\021\001\
\022\001\007\001\008\001\009\001\010\001\255\255\255\255\013\001\
\014\001\015\001\016\001\017\001\018\001\255\255\255\255\021\001\
\022\001\007\001\008\001\009\001\010\001\255\255\255\255\013\001\
\014\001\015\001\016\001\017\001\018\001\255\255\255\255\021\001\
\022\001\007\001\008\001\009\001\010\001\255\255\255\255\013\001\
\014\001\015\001\016\001\017\001\018\001\255\255\255\255\021\001\
\007\001\008\001\009\001\010\001\255\255\255\255\013\001\014\001\
\015\001\016\001\017\001\018\001\007\001\008\001\009\001\010\001\
\255\255\255\255\255\255\255\255\015\001\016\001\017\001\018\001"

let yynames_const = "\
  SEMI\000\
  LPAREN\000\
  RPAREN\000\
  LBRACE\000\
  RBRACE\000\
  COMMA\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  ASSIGN\000\
  NOT\000\
  EQ\000\
  NEQ\000\
  LT\000\
  LEQ\000\
  GT\000\
  GEQ\000\
  TRUE\000\
  FALSE\000\
  AND\000\
  OR\000\
  RETURN\000\
  IF\000\
  ELSE\000\
  FOR\000\
  WHILE\000\
  DEF\000\
  EOF\000\
  "

let yynames_block = "\
  INTLIT\000\
  STRINGLIT\000\
  ID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmts) in
    Obj.repr(
# 38 "parser.mly"
            ( List.rev _1 )
# 326 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    Obj.repr(
# 41 "parser.mly"
                   ( [] )
# 332 "parser.ml"
               : 'stmts))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmts) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 42 "parser.mly"
               ( _2 :: _1 )
# 340 "parser.ml"
               : 'stmts))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 45 "parser.mly"
              ( Expr _1 )
# 347 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 46 "parser.mly"
                ( Return Noexpr )
# 353 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 47 "parser.mly"
                     ( Return _2 )
# 360 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'stmts) in
    Obj.repr(
# 48 "parser.mly"
                        ( Block(List.rev _2) )
# 367 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 49 "parser.mly"
                                            ( If(_3, _5, Block([])) )
# 375 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'stmt) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 50 "parser.mly"
                                            ( If(_3, _5, _7) )
# 384 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'expr_opt) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'expr_opt) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 52 "parser.mly"
     ( For(_3, _5, _7, _9) )
# 394 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 53 "parser.mly"
                                  ( While(_3, _5) )
# 402 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fdecl) in
    Obj.repr(
# 54 "parser.mly"
              ( Fdecl(_2) )
# 409 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 57 "parser.mly"
                  ( Noexpr )
# 415 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 58 "parser.mly"
                  ( _1 )
# 422 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'formals_opt) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'stmts) in
    Obj.repr(
# 62 "parser.mly"
   ( { fname = _1;
       formals = _3;
       body = List.rev _6 } )
# 433 "parser.ml"
               : 'fdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 67 "parser.mly"
                  ( [] )
# 439 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'formal_list) in
    Obj.repr(
# 68 "parser.mly"
                  ( List.rev _1 )
# 446 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 71 "parser.mly"
       ( [_1] )
# 453 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'formal_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 72 "parser.mly"
                         ( _3 :: _1 )
# 461 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 76 "parser.mly"
                    ( IntLit(_1) )
# 468 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 77 "parser.mly"
                ( StringLit(unescape _1) )
# 475 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 78 "parser.mly"
                     ( BoolLit(true) )
# 481 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 79 "parser.mly"
                     ( BoolLit(false) )
# 487 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 80 "parser.mly"
                     ( Id(_1) )
# 494 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 81 "parser.mly"
                     ( Binop(_1, Add,   _3) )
# 502 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 82 "parser.mly"
                     ( Binop(_1, Sub,   _3) )
# 510 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 83 "parser.mly"
                     ( Binop(_1, Mult,  _3) )
# 518 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 84 "parser.mly"
                     ( Binop(_1, Div,   _3) )
# 526 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 85 "parser.mly"
                     ( Binop(_1, Equal, _3) )
# 534 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 86 "parser.mly"
                     ( Binop(_1, Neq,   _3) )
# 542 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 87 "parser.mly"
                     ( Binop(_1, Less,  _3) )
# 550 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 88 "parser.mly"
                     ( Binop(_1, Leq,   _3) )
# 558 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 89 "parser.mly"
                     ( Binop(_1, Greater, _3) )
# 566 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 90 "parser.mly"
                     ( Binop(_1, Geq,   _3) )
# 574 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 91 "parser.mly"
                     ( Binop(_1, And,   _3) )
# 582 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 92 "parser.mly"
                     ( Binop(_1, Or,    _3) )
# 590 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 93 "parser.mly"
                         ( Unop(Neg, _2) )
# 597 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 94 "parser.mly"
                     ( Unop(Not, _2) )
# 604 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 95 "parser.mly"
                     ( Assign(_1, _3) )
# 612 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'actuals_opt) in
    Obj.repr(
# 96 "parser.mly"
                                 ( Call(_1, _3) )
# 620 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 97 "parser.mly"
                       ( _2 )
# 627 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 100 "parser.mly"
                  ( [] )
# 633 "parser.ml"
               : 'actuals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'actuals_list) in
    Obj.repr(
# 101 "parser.mly"
                  ( List.rev _1 )
# 640 "parser.ml"
               : 'actuals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 104 "parser.mly"
                            ( [_1] )
# 647 "parser.ml"
               : 'actuals_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'actuals_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 105 "parser.mly"
                            ( _3 :: _1 )
# 655 "parser.ml"
               : 'actuals_list))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
