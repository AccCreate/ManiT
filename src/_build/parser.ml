type token =
  | SEMI
  | LPAREN
  | RPAREN
  | LBRACE
  | RBRACE
  | COMMA
  | LBRACK
  | RBRACK
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | ASSIGN
  | NOT
  | EQ
  | NEQ
  | LT
  | LEQ
  | GT
  | GEQ
  | TRUE
  | FALSE
  | AND
  | OR
  | RETURN
  | IF
  | ELSE
  | FOR
  | WHILE
  | DEF
  | GLOBAL
  | STRUCT
  | DOT
  | INT
  | FLOAT
  | BOOL
  | STRING
  | VOID
  | INTLIT of (int)
  | FLOATLIT of (float)
  | STRINGLIT of (string)
  | ID of (string)
  | EOF

open Parsing;;
let _ = parse_error;;
# 4 "parser.mly"
    open Ast;;
    let unescape s = Scanf.sscanf ("\"" ^ s ^ "\"") "%S%!" (fun x -> x)
# 52 "parser.ml"
let yytransl_const = [|
  257 (* SEMI *);
  258 (* LPAREN *);
  259 (* RPAREN *);
  260 (* LBRACE *);
  261 (* RBRACE *);
  262 (* COMMA *);
  263 (* LBRACK *);
  264 (* RBRACK *);
  265 (* PLUS *);
  266 (* MINUS *);
  267 (* TIMES *);
  268 (* DIVIDE *);
  269 (* ASSIGN *);
  270 (* NOT *);
  271 (* EQ *);
  272 (* NEQ *);
  273 (* LT *);
  274 (* LEQ *);
  275 (* GT *);
  276 (* GEQ *);
  277 (* TRUE *);
  278 (* FALSE *);
  279 (* AND *);
  280 (* OR *);
  281 (* RETURN *);
  282 (* IF *);
  283 (* ELSE *);
  284 (* FOR *);
  285 (* WHILE *);
  286 (* DEF *);
  287 (* GLOBAL *);
  288 (* STRUCT *);
  289 (* DOT *);
  290 (* INT *);
  291 (* FLOAT *);
  292 (* BOOL *);
  293 (* STRING *);
  294 (* VOID *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  295 (* INTLIT *);
  296 (* FLOATLIT *);
  297 (* STRINGLIT *);
  298 (* ID *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\005\000\009\000\010\000\
\010\000\010\000\010\000\010\000\011\000\011\000\012\000\012\000\
\008\000\006\000\007\000\014\000\014\000\013\000\013\000\015\000\
\015\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
\004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
\004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
\004\000\004\000\004\000\016\000\016\000\017\000\017\000\000\000"

let yylen = "\002\000\
\002\000\000\000\002\000\002\000\003\000\003\000\005\000\007\000\
\009\000\005\000\001\000\002\000\001\000\001\000\002\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\000\000\002\000\
\003\000\009\000\006\000\000\000\002\000\000\000\001\000\002\000\
\004\000\001\000\001\000\001\000\001\000\001\000\001\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\002\000\002\000\003\000\003\000\004\000\
\003\000\003\000\004\000\000\000\001\000\001\000\003\000\002\000"

let yydefred = "\000\000\
\002\000\000\000\064\000\000\000\000\000\002\000\000\000\000\000\
\000\000\037\000\038\000\000\000\000\000\000\000\000\000\000\000\
\000\000\018\000\017\000\019\000\016\000\034\000\035\000\036\000\
\000\000\001\000\003\000\000\000\011\000\013\000\020\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\022\000\021\000\000\000\000\000\012\000\
\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\054\000\006\000\000\000\058\000\005\000\000\000\
\000\000\000\000\000\000\015\000\000\000\023\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\057\000\025\000\
\000\000\000\000\000\000\000\000\000\000\000\000\056\000\059\000\
\000\000\000\000\010\000\000\000\000\000\000\000\000\000\024\000\
\000\000\000\000\000\000\032\000\000\000\000\000\029\000\000\000\
\008\000\000\000\002\000\000\000\027\000\000\000\000\000\033\000\
\009\000\026\000"

let yydgoto = "\002\000\
\003\000\004\000\027\000\028\000\074\000\029\000\048\000\030\000\
\031\000\032\000\046\000\102\000\109\000\113\000\110\000\079\000\
\036\000"

let yysindex = "\027\000\
\000\000\000\000\000\000\042\000\069\255\000\000\069\255\069\255\
\069\255\000\000\000\000\069\255\027\255\033\255\060\255\115\255\
\002\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\061\255\000\000\000\000\212\255\000\000\000\000\000\000\022\255\
\123\000\093\255\199\000\028\255\014\255\014\255\079\000\069\255\
\069\255\069\255\035\255\000\000\000\000\036\255\065\255\000\000\
\069\255\000\000\069\255\069\255\069\255\069\255\069\255\069\255\
\069\255\069\255\069\255\069\255\069\255\069\255\069\255\069\255\
\044\255\083\255\000\000\000\000\069\255\000\000\000\000\142\000\
\199\000\100\255\161\000\000\000\104\255\000\000\110\255\114\255\
\180\000\000\255\000\255\014\255\014\255\199\000\235\000\235\000\
\249\000\249\000\249\000\249\000\218\000\232\255\000\000\000\000\
\199\000\175\255\069\255\175\255\156\255\038\255\000\000\000\000\
\089\255\104\000\000\000\082\255\123\255\125\255\107\255\000\000\
\135\255\175\255\069\255\000\000\138\255\156\255\000\000\142\255\
\000\000\143\255\000\000\103\255\000\000\175\255\134\255\000\000\
\000\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\007\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\086\255\000\000\005\001\029\001\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\112\255\000\000\
\154\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\042\255\000\000\000\000\000\000\000\000\000\000\000\000\155\255\
\000\000\101\001\125\001\053\001\077\001\079\255\245\001\249\001\
\149\001\173\001\197\001\221\001\017\002\018\002\000\000\000\000\
\096\255\000\000\000\000\000\000\158\255\160\255\000\000\000\000\
\001\000\000\000\000\000\000\000\000\000\164\255\160\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000"

let yygindex = "\000\000\
\000\000\250\255\223\255\253\255\057\000\186\255\000\000\076\000\
\000\000\243\255\000\000\000\000\000\000\069\000\000\000\000\000\
\132\000"

let yytablesize = 810
let yytable = "\034\000\
\007\000\033\000\045\000\035\000\037\000\038\000\051\000\039\000\
\039\000\039\000\054\000\055\000\039\000\039\000\039\000\039\000\
\039\000\039\000\039\000\039\000\051\000\039\000\039\000\039\000\
\039\000\039\000\039\000\001\000\040\000\039\000\039\000\111\000\
\065\000\069\000\041\000\070\000\072\000\073\000\075\000\039\000\
\111\000\026\000\014\000\047\000\014\000\035\000\065\000\081\000\
\082\000\083\000\084\000\085\000\086\000\087\000\088\000\089\000\
\090\000\091\000\092\000\093\000\094\000\042\000\049\000\066\000\
\105\000\097\000\107\000\016\000\078\000\043\000\005\000\018\000\
\019\000\020\000\021\000\007\000\076\000\077\000\008\000\055\000\
\121\000\055\000\009\000\096\000\055\000\095\000\055\000\108\000\
\062\000\010\000\011\000\062\000\129\000\062\000\005\000\106\000\
\006\000\068\000\063\000\007\000\099\000\063\000\008\000\063\000\
\124\000\101\000\009\000\022\000\023\000\024\000\025\000\073\000\
\103\000\010\000\011\000\114\000\127\000\012\000\013\000\069\000\
\014\000\015\000\016\000\116\000\017\000\117\000\018\000\019\000\
\020\000\021\000\118\000\022\000\023\000\024\000\025\000\005\000\
\016\000\006\000\130\000\120\000\007\000\123\000\125\000\008\000\
\128\000\126\000\043\000\009\000\018\000\019\000\020\000\021\000\
\044\000\015\000\010\000\011\000\060\000\061\000\012\000\013\000\
\030\000\014\000\015\000\016\000\028\000\017\000\031\000\018\000\
\019\000\020\000\021\000\122\000\022\000\023\000\024\000\025\000\
\005\000\112\000\006\000\119\000\080\000\007\000\000\000\000\000\
\008\000\000\000\000\000\043\000\009\000\018\000\019\000\020\000\
\021\000\000\000\000\000\010\000\011\000\000\000\000\000\012\000\
\013\000\000\000\014\000\015\000\016\000\000\000\017\000\000\000\
\018\000\019\000\020\000\021\000\050\000\022\000\023\000\024\000\
\025\000\000\000\051\000\000\000\052\000\053\000\054\000\055\000\
\056\000\000\000\057\000\058\000\059\000\060\000\061\000\062\000\
\000\000\000\000\063\000\064\000\000\000\000\000\051\000\000\000\
\052\000\053\000\054\000\055\000\065\000\000\000\057\000\058\000\
\059\000\060\000\061\000\062\000\000\000\000\000\063\000\000\000\
\000\000\000\000\007\000\000\000\007\000\007\000\000\000\007\000\
\065\000\000\000\007\000\000\000\000\000\000\000\007\000\000\000\
\000\000\000\000\000\000\000\000\000\000\007\000\007\000\000\000\
\000\000\007\000\007\000\000\000\007\000\007\000\007\000\000\000\
\007\000\000\000\007\000\007\000\007\000\007\000\000\000\007\000\
\007\000\007\000\007\000\005\000\000\000\006\000\000\000\000\000\
\007\000\000\000\000\000\008\000\000\000\000\000\000\000\009\000\
\000\000\000\000\000\000\000\000\000\000\000\000\010\000\011\000\
\000\000\000\000\012\000\013\000\000\000\014\000\015\000\016\000\
\000\000\017\000\000\000\018\000\019\000\020\000\021\000\071\000\
\022\000\023\000\024\000\025\000\000\000\051\000\000\000\052\000\
\053\000\054\000\055\000\056\000\000\000\057\000\058\000\059\000\
\060\000\061\000\062\000\000\000\000\000\063\000\064\000\000\000\
\115\000\000\000\000\000\000\000\000\000\000\000\051\000\065\000\
\052\000\053\000\054\000\055\000\056\000\000\000\057\000\058\000\
\059\000\060\000\061\000\062\000\000\000\067\000\063\000\064\000\
\000\000\051\000\000\000\052\000\053\000\054\000\055\000\056\000\
\065\000\057\000\058\000\059\000\060\000\061\000\062\000\000\000\
\098\000\063\000\064\000\000\000\051\000\000\000\052\000\053\000\
\054\000\055\000\056\000\065\000\057\000\058\000\059\000\060\000\
\061\000\062\000\000\000\100\000\063\000\064\000\000\000\051\000\
\000\000\052\000\053\000\054\000\055\000\056\000\065\000\057\000\
\058\000\059\000\060\000\061\000\062\000\000\000\000\000\063\000\
\064\000\000\000\051\000\104\000\052\000\053\000\054\000\055\000\
\056\000\065\000\057\000\058\000\059\000\060\000\061\000\062\000\
\000\000\000\000\063\000\064\000\000\000\051\000\000\000\052\000\
\053\000\054\000\055\000\056\000\065\000\057\000\058\000\059\000\
\060\000\061\000\062\000\000\000\000\000\063\000\064\000\000\000\
\051\000\000\000\052\000\053\000\054\000\055\000\000\000\065\000\
\057\000\058\000\059\000\060\000\061\000\062\000\000\000\000\000\
\000\000\051\000\000\000\052\000\053\000\054\000\055\000\000\000\
\000\000\000\000\065\000\059\000\060\000\061\000\062\000\051\000\
\000\000\052\000\053\000\054\000\055\000\052\000\000\000\052\000\
\000\000\000\000\052\000\065\000\052\000\052\000\052\000\052\000\
\052\000\052\000\000\000\052\000\052\000\052\000\052\000\052\000\
\052\000\065\000\000\000\052\000\052\000\053\000\000\000\053\000\
\000\000\000\000\053\000\000\000\053\000\053\000\053\000\053\000\
\053\000\053\000\000\000\053\000\053\000\053\000\053\000\053\000\
\053\000\000\000\000\000\053\000\053\000\042\000\000\000\042\000\
\000\000\000\000\042\000\000\000\042\000\042\000\042\000\042\000\
\042\000\042\000\000\000\042\000\042\000\042\000\042\000\042\000\
\042\000\000\000\000\000\042\000\042\000\043\000\000\000\043\000\
\000\000\000\000\043\000\000\000\043\000\043\000\043\000\043\000\
\043\000\043\000\000\000\043\000\043\000\043\000\043\000\043\000\
\043\000\000\000\000\000\043\000\043\000\040\000\000\000\040\000\
\000\000\000\000\040\000\000\000\040\000\040\000\040\000\000\000\
\000\000\040\000\000\000\040\000\040\000\040\000\040\000\040\000\
\040\000\000\000\000\000\040\000\040\000\041\000\000\000\041\000\
\000\000\000\000\041\000\000\000\041\000\041\000\041\000\000\000\
\000\000\041\000\000\000\041\000\041\000\041\000\041\000\041\000\
\041\000\000\000\000\000\041\000\041\000\046\000\000\000\046\000\
\000\000\000\000\046\000\000\000\046\000\000\000\000\000\000\000\
\000\000\046\000\000\000\046\000\046\000\046\000\046\000\046\000\
\046\000\000\000\000\000\046\000\046\000\047\000\000\000\047\000\
\000\000\000\000\047\000\000\000\047\000\000\000\000\000\000\000\
\000\000\047\000\000\000\047\000\047\000\047\000\047\000\047\000\
\047\000\000\000\000\000\047\000\047\000\048\000\000\000\048\000\
\000\000\000\000\048\000\000\000\048\000\000\000\000\000\000\000\
\000\000\048\000\000\000\048\000\048\000\048\000\048\000\048\000\
\048\000\000\000\000\000\048\000\048\000\049\000\000\000\049\000\
\000\000\000\000\049\000\000\000\049\000\000\000\000\000\000\000\
\000\000\049\000\000\000\049\000\049\000\049\000\049\000\049\000\
\049\000\000\000\000\000\049\000\049\000\044\000\000\000\044\000\
\000\000\045\000\044\000\045\000\044\000\000\000\045\000\000\000\
\045\000\044\000\000\000\044\000\044\000\045\000\000\000\045\000\
\045\000\000\000\000\000\044\000\044\000\000\000\000\000\045\000\
\045\000\050\000\051\000\050\000\051\000\000\000\050\000\051\000\
\050\000\051\000\000\000\000\000\000\000\050\000\051\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\050\000\
\050\000\051\000"

let yycheck = "\006\000\
\000\000\005\000\016\000\007\000\008\000\009\000\007\001\001\001\
\012\000\003\001\011\001\012\001\006\001\007\001\008\001\009\001\
\010\001\011\001\012\001\013\001\007\001\015\001\016\001\017\001\
\018\001\019\001\020\001\001\000\002\001\023\001\024\001\102\000\
\033\001\006\001\002\001\008\001\040\000\041\000\042\000\033\001\
\111\000\000\000\001\001\042\001\003\001\049\000\033\001\051\000\
\052\000\053\000\054\000\055\000\056\000\057\000\058\000\059\000\
\060\000\061\000\062\000\063\000\064\000\002\001\002\001\042\001\
\098\000\069\000\100\000\030\001\004\001\032\001\002\001\034\001\
\035\001\036\001\037\001\007\001\042\001\042\001\010\001\001\001\
\114\000\003\001\014\001\001\001\006\001\042\001\008\001\101\000\
\003\001\021\001\022\001\006\001\126\000\008\001\002\001\099\000\
\004\001\005\001\003\001\007\001\001\001\006\001\010\001\008\001\
\118\000\002\001\014\001\039\001\040\001\041\001\042\001\115\000\
\003\001\021\001\022\001\027\001\123\000\025\001\026\001\006\001\
\028\001\029\001\030\001\042\001\032\001\003\001\034\001\035\001\
\036\001\037\001\006\001\039\001\040\001\041\001\042\001\002\001\
\030\001\004\001\005\001\005\001\007\001\004\001\001\001\010\001\
\042\001\003\001\032\001\014\001\034\001\035\001\036\001\037\001\
\038\001\042\001\021\001\022\001\003\001\003\001\025\001\026\001\
\003\001\028\001\029\001\030\001\005\001\032\001\003\001\034\001\
\035\001\036\001\037\001\115\000\039\001\040\001\041\001\042\001\
\002\001\102\000\004\001\111\000\049\000\007\001\255\255\255\255\
\010\001\255\255\255\255\032\001\014\001\034\001\035\001\036\001\
\037\001\255\255\255\255\021\001\022\001\255\255\255\255\025\001\
\026\001\255\255\028\001\029\001\030\001\255\255\032\001\255\255\
\034\001\035\001\036\001\037\001\001\001\039\001\040\001\041\001\
\042\001\255\255\007\001\255\255\009\001\010\001\011\001\012\001\
\013\001\255\255\015\001\016\001\017\001\018\001\019\001\020\001\
\255\255\255\255\023\001\024\001\255\255\255\255\007\001\255\255\
\009\001\010\001\011\001\012\001\033\001\255\255\015\001\016\001\
\017\001\018\001\019\001\020\001\255\255\255\255\023\001\255\255\
\255\255\255\255\002\001\255\255\004\001\005\001\255\255\007\001\
\033\001\255\255\010\001\255\255\255\255\255\255\014\001\255\255\
\255\255\255\255\255\255\255\255\255\255\021\001\022\001\255\255\
\255\255\025\001\026\001\255\255\028\001\029\001\030\001\255\255\
\032\001\255\255\034\001\035\001\036\001\037\001\255\255\039\001\
\040\001\041\001\042\001\002\001\255\255\004\001\255\255\255\255\
\007\001\255\255\255\255\010\001\255\255\255\255\255\255\014\001\
\255\255\255\255\255\255\255\255\255\255\255\255\021\001\022\001\
\255\255\255\255\025\001\026\001\255\255\028\001\029\001\030\001\
\255\255\032\001\255\255\034\001\035\001\036\001\037\001\001\001\
\039\001\040\001\041\001\042\001\255\255\007\001\255\255\009\001\
\010\001\011\001\012\001\013\001\255\255\015\001\016\001\017\001\
\018\001\019\001\020\001\255\255\255\255\023\001\024\001\255\255\
\001\001\255\255\255\255\255\255\255\255\255\255\007\001\033\001\
\009\001\010\001\011\001\012\001\013\001\255\255\015\001\016\001\
\017\001\018\001\019\001\020\001\255\255\003\001\023\001\024\001\
\255\255\007\001\255\255\009\001\010\001\011\001\012\001\013\001\
\033\001\015\001\016\001\017\001\018\001\019\001\020\001\255\255\
\003\001\023\001\024\001\255\255\007\001\255\255\009\001\010\001\
\011\001\012\001\013\001\033\001\015\001\016\001\017\001\018\001\
\019\001\020\001\255\255\003\001\023\001\024\001\255\255\007\001\
\255\255\009\001\010\001\011\001\012\001\013\001\033\001\015\001\
\016\001\017\001\018\001\019\001\020\001\255\255\255\255\023\001\
\024\001\255\255\007\001\008\001\009\001\010\001\011\001\012\001\
\013\001\033\001\015\001\016\001\017\001\018\001\019\001\020\001\
\255\255\255\255\023\001\024\001\255\255\007\001\255\255\009\001\
\010\001\011\001\012\001\013\001\033\001\015\001\016\001\017\001\
\018\001\019\001\020\001\255\255\255\255\023\001\024\001\255\255\
\007\001\255\255\009\001\010\001\011\001\012\001\255\255\033\001\
\015\001\016\001\017\001\018\001\019\001\020\001\255\255\255\255\
\255\255\007\001\255\255\009\001\010\001\011\001\012\001\255\255\
\255\255\255\255\033\001\017\001\018\001\019\001\020\001\007\001\
\255\255\009\001\010\001\011\001\012\001\001\001\255\255\003\001\
\255\255\255\255\006\001\033\001\008\001\009\001\010\001\011\001\
\012\001\013\001\255\255\015\001\016\001\017\001\018\001\019\001\
\020\001\033\001\255\255\023\001\024\001\001\001\255\255\003\001\
\255\255\255\255\006\001\255\255\008\001\009\001\010\001\011\001\
\012\001\013\001\255\255\015\001\016\001\017\001\018\001\019\001\
\020\001\255\255\255\255\023\001\024\001\001\001\255\255\003\001\
\255\255\255\255\006\001\255\255\008\001\009\001\010\001\011\001\
\012\001\013\001\255\255\015\001\016\001\017\001\018\001\019\001\
\020\001\255\255\255\255\023\001\024\001\001\001\255\255\003\001\
\255\255\255\255\006\001\255\255\008\001\009\001\010\001\011\001\
\012\001\013\001\255\255\015\001\016\001\017\001\018\001\019\001\
\020\001\255\255\255\255\023\001\024\001\001\001\255\255\003\001\
\255\255\255\255\006\001\255\255\008\001\009\001\010\001\255\255\
\255\255\013\001\255\255\015\001\016\001\017\001\018\001\019\001\
\020\001\255\255\255\255\023\001\024\001\001\001\255\255\003\001\
\255\255\255\255\006\001\255\255\008\001\009\001\010\001\255\255\
\255\255\013\001\255\255\015\001\016\001\017\001\018\001\019\001\
\020\001\255\255\255\255\023\001\024\001\001\001\255\255\003\001\
\255\255\255\255\006\001\255\255\008\001\255\255\255\255\255\255\
\255\255\013\001\255\255\015\001\016\001\017\001\018\001\019\001\
\020\001\255\255\255\255\023\001\024\001\001\001\255\255\003\001\
\255\255\255\255\006\001\255\255\008\001\255\255\255\255\255\255\
\255\255\013\001\255\255\015\001\016\001\017\001\018\001\019\001\
\020\001\255\255\255\255\023\001\024\001\001\001\255\255\003\001\
\255\255\255\255\006\001\255\255\008\001\255\255\255\255\255\255\
\255\255\013\001\255\255\015\001\016\001\017\001\018\001\019\001\
\020\001\255\255\255\255\023\001\024\001\001\001\255\255\003\001\
\255\255\255\255\006\001\255\255\008\001\255\255\255\255\255\255\
\255\255\013\001\255\255\015\001\016\001\017\001\018\001\019\001\
\020\001\255\255\255\255\023\001\024\001\001\001\255\255\003\001\
\255\255\001\001\006\001\003\001\008\001\255\255\006\001\255\255\
\008\001\013\001\255\255\015\001\016\001\013\001\255\255\015\001\
\016\001\255\255\255\255\023\001\024\001\255\255\255\255\023\001\
\024\001\001\001\001\001\003\001\003\001\255\255\006\001\006\001\
\008\001\008\001\255\255\255\255\255\255\013\001\013\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\023\001\
\024\001\024\001"

let yynames_const = "\
  SEMI\000\
  LPAREN\000\
  RPAREN\000\
  LBRACE\000\
  RBRACE\000\
  COMMA\000\
  LBRACK\000\
  RBRACK\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  ASSIGN\000\
  NOT\000\
  EQ\000\
  NEQ\000\
  LT\000\
  LEQ\000\
  GT\000\
  GEQ\000\
  TRUE\000\
  FALSE\000\
  AND\000\
  OR\000\
  RETURN\000\
  IF\000\
  ELSE\000\
  FOR\000\
  WHILE\000\
  DEF\000\
  GLOBAL\000\
  STRUCT\000\
  DOT\000\
  INT\000\
  FLOAT\000\
  BOOL\000\
  STRING\000\
  VOID\000\
  EOF\000\
  "

let yynames_block = "\
  INTLIT\000\
  FLOATLIT\000\
  STRINGLIT\000\
  ID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmts) in
    Obj.repr(
# 43 "parser.mly"
            ( List.rev _1 )
# 454 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    Obj.repr(
# 46 "parser.mly"
                   ( [] )
# 460 "parser.ml"
               : 'stmts))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmts) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 47 "parser.mly"
               ( _2 :: _1 )
# 468 "parser.ml"
               : 'stmts))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 50 "parser.mly"
              ( Expr _1 )
# 475 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 51 "parser.mly"
                     ( Return _2 )
# 482 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'stmts) in
    Obj.repr(
# 52 "parser.mly"
                        ( Block(List.rev _2) )
# 489 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 53 "parser.mly"
                                            ( If(_3, _5, Block([])) )
# 497 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'stmt) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 54 "parser.mly"
                                            ( If(_3, _5, _7) )
# 506 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'expr_opt) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'expr_opt) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 56 "parser.mly"
     ( For(_3, _5, _7, _9) )
# 516 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 57 "parser.mly"
                                  ( While(_3, _5) )
# 524 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'func) in
    Obj.repr(
# 58 "parser.mly"
         ( Func(_1) )
# 531 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'struct_decl) in
    Obj.repr(
# 59 "parser.mly"
                       ( Struc(_2) )
# 538 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 60 "parser.mly"
          ( Vdecl(_1) )
# 545 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 63 "parser.mly"
                ( _1 )
# 552 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 66 "parser.mly"
              ( _2 )
# 559 "parser.ml"
               : 'struct_typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 69 "parser.mly"
            ( String )
# 565 "parser.ml"
               : 'any_typ_not_void))
; (fun __caml_parser_env ->
    Obj.repr(
# 70 "parser.mly"
            ( Float )
# 571 "parser.ml"
               : 'any_typ_not_void))
; (fun __caml_parser_env ->
    Obj.repr(
# 71 "parser.mly"
            ( Int )
# 577 "parser.ml"
               : 'any_typ_not_void))
; (fun __caml_parser_env ->
    Obj.repr(
# 72 "parser.mly"
            ( Bool )
# 583 "parser.ml"
               : 'any_typ_not_void))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'struct_typ) in
    Obj.repr(
# 73 "parser.mly"
                  ( Struct_typ(_1) )
# 590 "parser.ml"
               : 'any_typ_not_void))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'any_typ_not_void) in
    Obj.repr(
# 76 "parser.mly"
                     ( _1 )
# 597 "parser.ml"
               : 'any_typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 77 "parser.mly"
          ( Void )
# 603 "parser.ml"
               : 'any_typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 80 "parser.mly"
  ( [] )
# 609 "parser.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'vdecl_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 81 "parser.mly"
                     ( _2 :: _1 )
# 617 "parser.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'any_typ_not_void) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 84 "parser.mly"
                             ( (_1, _2) )
# 625 "parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : 'any_typ) in
    let _3 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'formals_opt) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'stmts) in
    Obj.repr(
# 88 "parser.mly"
   ( { typ = _2;
       fname = _3;
       formals = _5;
       body = List.rev _8 } )
# 638 "parser.ml"
               : 'func))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'vdecl_list) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'struct_fdecls) in
    Obj.repr(
# 95 "parser.mly"
  ( { sname = _1; 
      vdecls = List.rev _3;
      fdecls  = List.rev _4 } )
# 649 "parser.ml"
               : 'struct_decl))
; (fun __caml_parser_env ->
    Obj.repr(
# 100 "parser.mly"
                  ( [] )
# 655 "parser.ml"
               : 'struct_fdecls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'func) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'struct_fdecls) in
    Obj.repr(
# 101 "parser.mly"
                       ( _1::_2 )
# 663 "parser.ml"
               : 'struct_fdecls))
; (fun __caml_parser_env ->
    Obj.repr(
# 104 "parser.mly"
                  ( [] )
# 669 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'formal_list) in
    Obj.repr(
# 105 "parser.mly"
                  ( List.rev _1 )
# 676 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'any_typ_not_void) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 108 "parser.mly"
                        ( [(_1, _2)] )
# 684 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'formal_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'any_typ_not_void) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 109 "parser.mly"
                                          ( (_3, _4)  :: _1 )
# 693 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 112 "parser.mly"
                    ( IntLit(_1) )
# 700 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 113 "parser.mly"
                    ( FloatLit(_1) )
# 707 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 114 "parser.mly"
                ( StringLit(unescape _1) )
# 714 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 115 "parser.mly"
                     ( BoolLit(true) )
# 720 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 116 "parser.mly"
                     ( BoolLit(false) )
# 726 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 117 "parser.mly"
                     ( Id(_1) )
# 733 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 118 "parser.mly"
                     ( Binop(_1, Add,   _3) )
# 741 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 119 "parser.mly"
                     ( Binop(_1, Sub,   _3) )
# 749 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 120 "parser.mly"
                     ( Binop(_1, Mult,  _3) )
# 757 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 121 "parser.mly"
                     ( Binop(_1, Div,   _3) )
# 765 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 122 "parser.mly"
                     ( Binop(_1, Equal, _3) )
# 773 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 123 "parser.mly"
                     ( Binop(_1, Neq,   _3) )
# 781 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 124 "parser.mly"
                     ( Binop(_1, Less,  _3) )
# 789 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 125 "parser.mly"
                     ( Binop(_1, Leq,   _3) )
# 797 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 126 "parser.mly"
                     ( Binop(_1, Greater, _3) )
# 805 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 127 "parser.mly"
                     ( Binop(_1, Geq,   _3) )
# 813 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 128 "parser.mly"
                     ( Binop(_1, And,   _3) )
# 821 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 129 "parser.mly"
                     ( Binop(_1, Or,    _3) )
# 829 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 130 "parser.mly"
                         ( Unop(Neg, _2) )
# 836 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 131 "parser.mly"
                     ( Unop(Not, _2) )
# 843 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 132 "parser.mly"
                       ( _2 )
# 850 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 133 "parser.mly"
                       ( Assign(_1, _3) )
# 858 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'exprs_opt) in
    Obj.repr(
# 134 "parser.mly"
                               ( Call(_1, _3) )
# 866 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 136 "parser.mly"
                ( Struct_access(_1, _3) )
# 874 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'exprs_list) in
    Obj.repr(
# 138 "parser.mly"
                             ( Array_create(_2) )
# 881 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 139 "parser.mly"
                            ( Array_access(_1,_3) )
# 889 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 142 "parser.mly"
                  ( [] )
# 895 "parser.ml"
               : 'exprs_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'exprs_list) in
    Obj.repr(
# 143 "parser.mly"
                ( List.rev _1 )
# 902 "parser.ml"
               : 'exprs_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 146 "parser.mly"
                            ( [_1] )
# 909 "parser.ml"
               : 'exprs_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exprs_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 147 "parser.mly"
                          ( _3 :: _1 )
# 917 "parser.ml"
               : 'exprs_list))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
